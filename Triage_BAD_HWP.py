import olefile
import zlib
import re
import sys
import binascii

def hwpV5_triage():
    try:
        with open(sys.argv[1], 'rb') as file:
            magic_CFBF = r'd0cf11e0a1b11ae1'
            magic_hwpV5 = r'48575020446f63756d656e742046696c65'
            file = file.read()
            file_hex = binascii.b2a_hex(file)
            if re.findall(magic_CFBF, str(file_hex)) and re.findall(magic_hwpV5, str(file_hex)):
                print("HWP 5.0 version file triage!! [+] Identifying Malware ~ [+]")
            else:
                print("Not HWP 5.0 version file")
    except Exception as err:
        print(err)
        file.close()

def find_hexadecimal(s):
    pattern = r'\<+[0-9a-fA-F]{10,}\>'
    hex_list = re.findall(pattern, s)
    hex_strings = re.sub("(<|>|\[|\]|'|')", "", str(hex_list))
    return hex_strings

def zlib_decompreser(stream):
    compress_stream = stream.read()
    zobj = zlib.decompressobj(-zlib.MAX_WBITS)
    data = zobj.decompress(compress_stream).decode('utf-8')
    return data

def Postscript_triage():
    hwpV5_triage()
    try:
        with open(sys.argv[1], 'rb') as file:
            CFBF = olefile.OleFileIO(file)

            for i in range(len(CFBF.listdir())):
                if ('.ps' or 'eps') in str(CFBF.listdir()[i]):
                    ps_stream = '/'.join(CFBF.listdir()[i])
                    ps_stream = CFBF.openstream(ps_stream)
            data = zlib_decompreser(ps_stream)
            
            postscript_hex = find_hexadecimal(data)
            postscript_bytes = bytes.fromhex(postscript_hex)
            shellcode_bytes = bytes.fromhex(find_hexadecimal(postscript_bytes.decode('utf-8')))

            with open(sys.argv[2], 'wb') as file:
                file.write(b"============================[Post Scripts!!]============================\n\n")
                file.write(postscript_bytes)
                file.write(b"\n\n\n\n============================[Find Shell-Code!!]============================\n\n")
                file.write(shellcode_bytes)
            print('Analysis Success â†’ "{0}"'.format(file.name)) 
    except Exception as err:
        print('Error Message: "{0}"'.format(err))
        file.close()

def MACRO_triage():
    try:
        with open(sys.argv[1], 'rb') as file:
            CFBF = olefile.OleFileIO(file)
            
            for i in range(len(CFBF.listdir())):
                if ('DefaultJScript') in str(CFBF.listdir()[i]):
                    mc_stream = '/'.join(CFBF.listdir()[i])
                    print(mc_stream)
                    mc_stream = CFBF.openstream(mc_stream)
            data = bytes.fromhex(str(mc_stream))
    except Exception as err:
        print(err)


#hwpV5_triage()
Postscript_triage()
#MACRO_triage()